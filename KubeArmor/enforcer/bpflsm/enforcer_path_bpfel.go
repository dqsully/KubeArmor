// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package bpflsm

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type enforcer_pathBuffer struct {
	Data          [32760]int8
	PrependOffset uint32
	AppendOffset  uint32
}

type enforcer_pathRuleKey struct {
	Path   [256]int8
	Source [256]int8
}

// loadEnforcer_path returns the embedded CollectionSpec for enforcer_path.
func loadEnforcer_path() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Enforcer_pathBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load enforcer_path: %w", err)
	}

	return spec, err
}

// loadEnforcer_pathObjects loads enforcer_path and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*enforcer_pathObjects
//	*enforcer_pathPrograms
//	*enforcer_pathMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEnforcer_pathObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEnforcer_path()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// enforcer_pathSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type enforcer_pathSpecs struct {
	enforcer_pathProgramSpecs
	enforcer_pathMapSpecs
}

// enforcer_pathSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type enforcer_pathProgramSpecs struct {
	EnforceChmod     *ebpf.ProgramSpec `ebpf:"enforce_chmod"`
	EnforceLinkDst   *ebpf.ProgramSpec `ebpf:"enforce_link_dst"`
	EnforceLinkSrc   *ebpf.ProgramSpec `ebpf:"enforce_link_src"`
	EnforceMkdir     *ebpf.ProgramSpec `ebpf:"enforce_mkdir"`
	EnforceMknod     *ebpf.ProgramSpec `ebpf:"enforce_mknod"`
	EnforceRenameNew *ebpf.ProgramSpec `ebpf:"enforce_rename_new"`
	EnforceRenameOld *ebpf.ProgramSpec `ebpf:"enforce_rename_old"`
	EnforceRmdir     *ebpf.ProgramSpec `ebpf:"enforce_rmdir"`
	EnforceSymlink   *ebpf.ProgramSpec `ebpf:"enforce_symlink"`
	EnforceTruncate  *ebpf.ProgramSpec `ebpf:"enforce_truncate"`
	EnforceUnlink    *ebpf.ProgramSpec `ebpf:"enforce_unlink"`
}

// enforcer_pathMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type enforcer_pathMapSpecs struct {
	Buffers             *ebpf.MapSpec `ebpf:"buffers"`
	KubearmorContainers *ebpf.MapSpec `ebpf:"kubearmor_containers"`
	KubearmorEvents     *ebpf.MapSpec `ebpf:"kubearmor_events"`
	RuleKeys            *ebpf.MapSpec `ebpf:"rule_keys"`
}

// enforcer_pathObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEnforcer_pathObjects or ebpf.CollectionSpec.LoadAndAssign.
type enforcer_pathObjects struct {
	enforcer_pathPrograms
	enforcer_pathMaps
}

func (o *enforcer_pathObjects) Close() error {
	return _Enforcer_pathClose(
		&o.enforcer_pathPrograms,
		&o.enforcer_pathMaps,
	)
}

// enforcer_pathMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEnforcer_pathObjects or ebpf.CollectionSpec.LoadAndAssign.
type enforcer_pathMaps struct {
	Buffers             *ebpf.Map `ebpf:"buffers"`
	KubearmorContainers *ebpf.Map `ebpf:"kubearmor_containers"`
	KubearmorEvents     *ebpf.Map `ebpf:"kubearmor_events"`
	RuleKeys            *ebpf.Map `ebpf:"rule_keys"`
}

func (m *enforcer_pathMaps) Close() error {
	return _Enforcer_pathClose(
		m.Buffers,
		m.KubearmorContainers,
		m.KubearmorEvents,
		m.RuleKeys,
	)
}

// enforcer_pathPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEnforcer_pathObjects or ebpf.CollectionSpec.LoadAndAssign.
type enforcer_pathPrograms struct {
	EnforceChmod     *ebpf.Program `ebpf:"enforce_chmod"`
	EnforceLinkDst   *ebpf.Program `ebpf:"enforce_link_dst"`
	EnforceLinkSrc   *ebpf.Program `ebpf:"enforce_link_src"`
	EnforceMkdir     *ebpf.Program `ebpf:"enforce_mkdir"`
	EnforceMknod     *ebpf.Program `ebpf:"enforce_mknod"`
	EnforceRenameNew *ebpf.Program `ebpf:"enforce_rename_new"`
	EnforceRenameOld *ebpf.Program `ebpf:"enforce_rename_old"`
	EnforceRmdir     *ebpf.Program `ebpf:"enforce_rmdir"`
	EnforceSymlink   *ebpf.Program `ebpf:"enforce_symlink"`
	EnforceTruncate  *ebpf.Program `ebpf:"enforce_truncate"`
	EnforceUnlink    *ebpf.Program `ebpf:"enforce_unlink"`
}

func (p *enforcer_pathPrograms) Close() error {
	return _Enforcer_pathClose(
		p.EnforceChmod,
		p.EnforceLinkDst,
		p.EnforceLinkSrc,
		p.EnforceMkdir,
		p.EnforceMknod,
		p.EnforceRenameNew,
		p.EnforceRenameOld,
		p.EnforceRmdir,
		p.EnforceSymlink,
		p.EnforceTruncate,
		p.EnforceUnlink,
	)
}

func _Enforcer_pathClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed enforcer_path_bpfel.o
var _Enforcer_pathBytes []byte
